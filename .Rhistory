points(notmay$Wind,notmay$Ozone,col="red", pch=17)
points(notmay$Wind,notmay$Ozone,col="red", pch=8)
legend("topright",pch = c(17,8),col =c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind), lty=2,lwd=2)
par(mfro=c(1,2))
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,2), oma=c(0,0,2,0))
par(mfrow = c(1,3),  mar = c(4,4,2,1), oma=c(0,0,2,0))
plot(airquality$Wind,airquality$Ozone, title= "Ozone and Wind")
plot(airquality$Wind,airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R,airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer = TRUE)
nrow(training.clean)
head(allData)
dim(training.clean)
clear
clear()
n = c(2, 3, 5)
s = c("aa", "bb", "cc", "dd", "ee")
s = c("aa", "bb", "cc", "dd", "ee")
x = list(n, s, b, 3)   # x contains copies of n, s, b
x = list(n, s, b, 3)
x = list(n, s,  3)
x[2]
setwd("~/Google Drive/Coursera/Data Science Specialization/data products")
setwd("~/Google Drive/Coursera/Data Science Specialization/data products/Week2Assignment")
shiny::runApp('GACities')
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
shiny::runApp('GACities')
projDir <- getwd()
projDir
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
filename <- "Georgia Cities.csv"
dataDir <-  "./data"
csvFilePath <- paste(dataDir, filename, sep = "/")
csvFilePath
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
runApp('GACities')
getwd()
runApp('GACities')
runApp('GACities')
setwd("~/Google Drive/Coursera/Data Science Specialization/data products/Project")
install.packages("maps")
https://maps.googleapis.com/maps/api/geocode/json?address=751%20Bayliss%20Dr,%20Marietta%20GA&sensor=false
library(maps)
projDir <- getwd()
filename <- "AfricanCountries.csv"
dataDir <-  paste(projDir,"data" , sep = "/")
csvFilePath <- paste(dataDir, filename, sep = "/")
df <-
as.data.frame(read.csv(csvFilePath, header = TRUE, colClasses = "character"))
projDir <- getwd()
filename <- "AfricanCountries.csv"
dataDir <-  paste(projDir,"data" , sep = "/")
csvFilePath <- paste(dataDir, filename, sep = "/")
df <-
as.data.frame(read.csv(csvFilePath, header = TRUE, colClasses = "character"))
#head(df)
names(df) <- tolower(names(df))
africa <- df
africa
warning("No matches in database for ", paste(setdiff(africa, map_data('world')$region), collapse=", "))
library(map)
library(maps)
warning("No matches in database for ", paste(setdiff(africa, map_data('world')$region), collapse=", "))
m <- map_data("world")
load_all("ggplot2")
library("ggmap")
install.packages("ggmap")
install.packages("maptools")
install.packages("maps")
library("ggmap")
install.packages("maps")
library(maptools)
library(maps)
warning("No matches in database for ", paste(setdiff(africa, map_data('world')$region), collapse=", "))
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
points(visit.x,visit.y, col="red", pch=16)
ll.africa <- geocode(africa)
install.packages("geocode")
ll.africa <- geocode(africa)
library(geocode)
install.packages("geocode")
install.packages("GEOmap")
ll.africa <- geocode(africa)
geocode(location, output = c("latlon", "latlona", "more", "all"),
source = c("google", "dsk"), messaging = FALSE, force = ifelse(source ==
"dsk", FALSE, TRUE), sensor = FALSE, override_limit = FALSE,
client = "", signature = "", nameType = c("long", "short"), data)
library(ggmap)
ll.africa <- geocode(africa)
africa
install.packages("stringr", dependencies=TRUE)
install.packages("stringr", dependencies = TRUE)
require(stringr)
example(str_trim)
africa<-str_trim(africa)
africa
ll.africa <- geocode(africa)
library(ggmap)
ll.africa <- geocode(africa)
africa.x <- ll.africa$lon
africa.y <- ll.africa$lat
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
qmap("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
library(maptools)
library(maps)
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
points(africa.x,africa.y, col="red", pch=16)
head(africa)
library(ggmap)
##library("ggmap")
library(maptools)
library(maps)
library(geocode)
geocode(location, output = c("latlon", "latlona", "more", "all"),
source = c("google", "dsk"), messaging = FALSE, force = ifelse(source ==
"dsk", FALSE, TRUE), sensor = FALSE, override_limit = FALSE,
client = "", signature = "", nameType = c("long", "short"), data)
projDir <- getwd()
filename <- "AfricanCountries.csv"
m <- map_data("world")
dataDir <-  paste(projDir,"data" , sep = "/")
csvFilePath <- paste(dataDir, filename, sep = "/")
df <-
as.data.frame(read.csv(csvFilePath, header = TRUE, colClasses = "character"))
#head(df)
names(df) <- tolower(names(df))
africa <- df
warning("No matches in database for ", paste(setdiff(africa, map_data('world')$region), collapse=", "))
africanCountries <- map_data('world', region=africa)
africa
require(stringr)
example(str_trim)
africa<-str_trim(africa)
ll.africa <- geocode(africa)
africa.x <- ll.africa$lon
africa.x
africa.y
install.packages("ggmap")
install.packages("maptools")
install.packages("maptools")
install.packages("maps")
install.packages("geocode")
install.packages("stringr", dependencies=TRUE)
library(ggmap)
##library("ggmap")
library(maptools)
library(maps)
library(geocode)
geocode(location, output = c("latlon", "latlona", "more", "all"),
source = c("google", "dsk"), messaging = FALSE, force = ifelse(source ==
"dsk", FALSE, TRUE), sensor = FALSE, override_limit = FALSE,
client = "", signature = "", nameType = c("long", "short"), data)
projDir <- getwd()
filename <- "AfricanCountries.csv"
m <- map_data("world")
dataDir <-  paste(projDir,"data" , sep = "/")
csvFilePath <- paste(dataDir, filename, sep = "/")
df <-
as.data.frame(read.csv(csvFilePath, header = TRUE, colClasses = "character"))
#head(df)
names(df) <- tolower(names(df))
africa <- df
head(africa)
require(stringr)
example(str_trim)
africa<-str_trim(africa)
ll.africa <- geocode(africa)
africa.x <- ll.africa$lon
africa.y <- ll.africa$lat
head(africa)
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
points(africa.x,africa.y, col="red", pch=16)
head(worldMapEnv)
head(world.legacy)
head(world.cities)
warning("No matches in database for ", paste(setdiff(world.cities, map_data('world')$region), collapse=", "))
africanCountries <- map_data('world', region=africa)
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
points(world.cities$lat,world.cities$long, col="red", pch=16)
projDir <- getwd()
projDir
africaFilename <- "AfricanCountries.csv"
dataDir <-  paste(projDir,"data" , sep = "/")
csvFilePath <- paste(dataDir, africaFilename, sep = "/")
head(csvFilePath)
africa <- read.csv(csvFilePath, header = TRUE, colClasses = "character")
head(africa)
africa$Country
worldFilename <- "CountriesGeoCodes.csv"
dataDir <-  paste(projDir,"data" , sep = "/")
worldFilePath <- paste(dataDir, worldFilename, sep = "/")
worldCountries <- read.csv(worldFilePath, header = TRUE, colClasses = "character")
head(worldCountries)
worldCountries$name
x <- worldCountries[, grep(africa$Country, colnames(worldCountries$country))]
x
x <- worldCountries[ africa$Country %in% orldCountries$country,]
x <- worldCountries[ africa$Country %in% worldCountries$country,]
x
x <- worldCountries[ worldCountries$Country %in% africa$country,]
x
y <- worldCountries[match(africa$country, dworldCountries$Country, nomatch=0),]
y
y <- worldCountries[match(africa$country, worldCountries$Country, nomatch=0),]
y
head(worldCountries)
y <- worldCountries[match(africa$country, worldCountries$name, nomatch=0),]
y
head(africa)
worldCountries$name
africa$Country
z <- worldCountries[ which(worldCountries$name == africa$Country)]
z <- worldCountries[ which(worldCountries$name == africa[africa$Country,])]
z
z <- worldCountries[ which(worldCountries$name == africa[africa$Country])]
z <- worldCountries[ which(worldCountries$name == africa[,africa$Country])]
y <- worldCountries[match(africa$country, worldCountries$name, nomatch=0),]
y
y <- worldCountries[match("Kenya", worldCountries$name, nomatch=0),]
y
for (item in africa) {
y <-
worldCountries[match(item$country  , worldCountries$name, nomatch = 0), ]
}
s<- as.vector(africa$Country)
s
for (i in s) {
y <-
worldCountries[match(i  , worldCountries$name, nomatch = 0), ]
}
y
s<- as.vector(africa$Country)
for (i in s) {
y <-
list( worldCountries[match(i  , worldCountries$name, nomatch = 0), ])
}
y
s<- as.vector(africa$Country)
for (i in s) {
y <-
as.data.frame(
worldCountries[match(i  , worldCountries$name, nomatch = 0), ]
)
}
y
s<- as.vector(africa$Country)
for(w in worldCountries){
for (i in s) {
y <-
as.data.frame(
worldCountries[match(i  , w$name, nomatch = 0), ]
)
}
}
y
s <- as.vector(africa$Country)
for (i in s) {
for (w in worldCountries) {
y <-
as.data.frame(worldCountries[match(i  , w$name, nomatch = 0),])
}
}
y
s<- as.vector(africa$Country)
for (i in s) {
if(
worldCountries[match(i  , worldCountries$name, nomatch = 0), ] == 0)
worldCountries$inAfrica <- "Yes"
}
worldCountries
y <- subset(worldCountries, (as.vector(africa$Country) %in% worldCountries$name))
y
worldCountries$inAfrica <-  as.vector(africa$Country) %in% worldCountries$name
as.vector(africa$Country) %in% worldCountries$name
worldCountries$inAfrica <- worldCountries$name   %in%  as.vector(africa$Country)
worldCountries
leaflet(data = worldCountries, padding = 0) %>%
addMarkers(
data = worldCountries,
lat = ~ latitude,
lng = ~ longitude,
popup =  ~ name,
options = markerOptions(draggable = TRUE, riseOnHover = TRUE)
) %>%
)
install.packages("googleVis")
library(googleVis)
install.packages("maps");install.packages("mapdata")
install.packages("maps")
map?
;
?map
map(worldCountries)
maps(worldCountries)
library(maps)
maps(worldCountries)
install.packages("maps")
install.packages("maps")
install.packages("mapdata")
library(maps)
maps(worldCountries)
map(worldCountries)
map('worldHires',as.vector(africa$Country))
map('worldHires')
map('worldHires',
as.vector(africa$Country))
install.packages("rworldmap")
install.packages("ggplot2")
library(rworldmap)
library(ggplot2)
map.world <- map_data(map="world")
#Add the data you want to map countries by to map.world
#In this example, I add lengths of country names plus some offset
map.world$name_len <- nchar(map.world$region) + sample(nrow(map.world))
gg <- ggplot()
gg <- gg + theme(legend.position="none")
gg <- gg + geom_map(data=map.world, map=map.world, aes(map_id=region, x=long, y=lat, fill=name_len))
gg <- gg + scale_fill_gradient(low = "green", high = "brown3", guide = "colourbar")
gg <- gg + coord_equal()
gg
map.world$name_len <- nchar(map.world$region) + as.vector(africa$Country))
map.world$name_len <- nchar(map.world$region) + as.vector(africa$Country)
head(worldMap)
worldMap <- map_data(map="world")
head(worldMap)
sample(nrow(worldMap))
head(sample(nrow(worldMap)))
worldMap$subregion
head(worldMap)
head(worldMap, tail = 10)
head(worldMap, 40)
worldMap$subregion <- if( worldMap$region  %in%  as.vector(africa$Country)) "Africa"
head(worldMap, 40)
# install.packages("rworldmap")
# install.packages("ggplot2")
library(rworldmap)
library(ggplot2)
worldMap <- map_data(map="world")
head(worldMap)
head(sample(nrow(worldMap)))
#Add the data you want to map countries by to map.world
#In this example, I add lengths of country names plus some offset
worldMap$name_len <- nchar(worldMap$region) + sample(nrow(worldMap))
gg <- ggplot()
gg <- gg + theme(legend.position="none")
gg <- gg + ggtitle(expression("World Map with each country"))
gg <- gg + geom_map(data=worldMap, map=worldMap, aes(map_id=region, x=long, y=lat, fill=name_len))
gg <- gg + scale_fill_gradient(low = "green", high = "brown3", guide = "colourbar")
gg <- gg + coord_equal()
gg
# install.packages("rworldmap")
# install.packages("ggplot2")
library(rworldmap)
library(ggplot2)
worldMap <- map_data(map="world")
head(worldMap)
head(sample(nrow(worldMap)))
#Add the data you want to map countries by to map.world
#In this example, I add lengths of country names plus some offset
worldMap$name_len <- nchar(worldMap$region) + sample(nrow(worldMap))
gg <- ggplot()
gg <- gg + theme(legend.position="none")
gg <- gg + ggtitle(expression("World Countries, | a data Product project Dec 25 2017"))
gg <- gg + geom_map(data=worldMap, map=worldMap, aes(map_id=region, x=long, y=lat, fill=name_len))
gg <- gg + scale_fill_gradient(low = "green", high = "brown3", guide = "colourbar")
gg <- gg + coord_equal()
gg
library(shiny); print(source('project.R')$value)
print(source('project.R')$value)
server()
server
server()
worldMap <- map_data(map="world")
library(shiny)
library(leaflet)
library(shinydashboard)
library(htmlwidgets)
library(rworldmap)
library(ggplot2)
ui <-
shinyUI(# dashboardHeader(title = "Data Products Week 2 Assignment : Interactive Map in leaflet "),
fluidPage(# Application title
titlePanel(
paste(
"Data Products Project : ",
".           by :
Kimamö Wachira . ",
" date: Dec 3rd  2016  ",
sep = "\n"
)
),
mainPanel(bootstrapPage(
div(
class = "outer",
tags$style(
type = "text/css",
".outer {position: fixed; top: 120px; left: 0; right: 0; bottom: 0; overflow: hidden; padding: 0}"
),
leafletOutput("mainPanel", width = "100%", height = "100%" ),
absolutePanel(
top = 60,
right = 10,
draggable = TRUE
)
)
))))
server <- shinyServer(function() {
set.seed(12252016)
worldMap <- map_data(map="world")
head(worldMap)
head(sample(nrow(worldMap)))
#Add the data you want to map countries by to map.world
#In this example, I add lengths of country names plus some offset
worldMap$name_len <- nchar(worldMap$region) + sample(nrow(worldMap))
gg <- ggplot()
gg <- gg + theme(legend.position="none")
gg <- gg + ggtitle(expression("World Countries"))
gg <- gg + geom_map(data=worldMap, map=worldMap, aes(map_id=region, x=long, y=lat, fill=name_len))
gg <- gg + scale_fill_gradient(low = "green", high = "brown3", guide = "colourbar")
gg <- gg + coord_equal()
gg
})
server()
library(shiny)
library(leaflet)
library(shinydashboard)
library(htmlwidgets)
library(rworldmap)
library(ggplot2)
ui <-
shinyUI(# dashboardHeader(title = "Data Products Week 2 Assignment : Interactive Map in leaflet "),
fluidPage(# Application title
titlePanel(
paste(
"Data Products Project : ",
".           by :
Kimamö Wachira . ",
" date: Dec 3rd  2016  ",
sep = "\n"
)
),
mainPanel(bootstrapPage(
div(
class = "outer",
tags$style(
type = "text/css",
".outer {position: fixed; top: 120px; left: 0; right: 0; bottom: 0; overflow: hidden; padding: 0}"
),
leafletOutput("mainPanel", width = "100%", height = "100%" ),
absolutePanel(
top = 60,
right = 10,
draggable = TRUE
)
)
))))
server <- shinyServer(function() {
set.seed(12252016)
worldMap <- map_data(map="world")
head(worldMap)
head(sample(nrow(worldMap)))
#Add the data you want to map countries by to map.world
#In this example, I add lengths of country names plus some offset
worldMap$name_len <- nchar(worldMap$region) + sample(nrow(worldMap))
gg <- ggplot()
gg <- gg + theme(legend.position="none")
gg <- gg + ggtitle(expression("World Countries"))
gg <- gg + geom_map(data=worldMap, map=worldMap, aes(map_id=region, x=long, y=lat, fill=name_len))
gg <- gg + scale_fill_gradient(low = "green", high = "brown3", guide = "colourbar")
gg <- gg + coord_equal()
gg
})
# Run the application
shinyApp(ui = ui, server = server)
runApp('worldMapProject')
install.packages("shinydashboard")
shiny::runApp()
